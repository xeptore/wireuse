// Code generated by MockGen. DO NOT EDIT.
// Source: ingest.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ingest "github.com/xeptore/wireuse/ingest"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// IngestUsage mocks base method.
func (m *MockStore) IngestUsage(ctx context.Context, peersUsage []ingest.PeerUsage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestUsage", ctx, peersUsage)
	ret0, _ := ret[0].(error)
	return ret0
}

// IngestUsage indicates an expected call of IngestUsage.
func (mr *MockStoreMockRecorder) IngestUsage(ctx, peersUsage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestUsage", reflect.TypeOf((*MockStore)(nil).IngestUsage), ctx, peersUsage)
}

// LoadBeforeRestartUsage mocks base method.
func (m *MockStore) LoadBeforeRestartUsage(ctx context.Context) (map[string]ingest.PeerUsage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBeforeRestartUsage", ctx)
	ret0, _ := ret[0].(map[string]ingest.PeerUsage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadBeforeRestartUsage indicates an expected call of LoadBeforeRestartUsage.
func (mr *MockStoreMockRecorder) LoadBeforeRestartUsage(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBeforeRestartUsage", reflect.TypeOf((*MockStore)(nil).LoadBeforeRestartUsage), ctx)
}

// MockWgPeers is a mock of WgPeers interface.
type MockWgPeers struct {
	ctrl     *gomock.Controller
	recorder *MockWgPeersMockRecorder
}

// MockWgPeersMockRecorder is the mock recorder for MockWgPeers.
type MockWgPeersMockRecorder struct {
	mock *MockWgPeers
}

// NewMockWgPeers creates a new mock instance.
func NewMockWgPeers(ctrl *gomock.Controller) *MockWgPeers {
	mock := &MockWgPeers{ctrl: ctrl}
	mock.recorder = &MockWgPeersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWgPeers) EXPECT() *MockWgPeersMockRecorder {
	return m.recorder
}

// Usage mocks base method.
func (m *MockWgPeers) Usage(ctx context.Context) ([]ingest.PeerUsage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Usage", ctx)
	ret0, _ := ret[0].([]ingest.PeerUsage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Usage indicates an expected call of Usage.
func (mr *MockWgPeersMockRecorder) Usage(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Usage", reflect.TypeOf((*MockWgPeers)(nil).Usage), ctx)
}

// MockRestartMarkFileReadRemover is a mock of RestartMarkFileReadRemover interface.
type MockRestartMarkFileReadRemover struct {
	ctrl     *gomock.Controller
	recorder *MockRestartMarkFileReadRemoverMockRecorder
}

// MockRestartMarkFileReadRemoverMockRecorder is the mock recorder for MockRestartMarkFileReadRemover.
type MockRestartMarkFileReadRemoverMockRecorder struct {
	mock *MockRestartMarkFileReadRemover
}

// NewMockRestartMarkFileReadRemover creates a new mock instance.
func NewMockRestartMarkFileReadRemover(ctrl *gomock.Controller) *MockRestartMarkFileReadRemover {
	mock := &MockRestartMarkFileReadRemover{ctrl: ctrl}
	mock.recorder = &MockRestartMarkFileReadRemoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestartMarkFileReadRemover) EXPECT() *MockRestartMarkFileReadRemoverMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockRestartMarkFileReadRemover) Read(filename string) ([1]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", filename)
	ret0, _ := ret[0].([1]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRestartMarkFileReadRemoverMockRecorder) Read(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRestartMarkFileReadRemover)(nil).Read), filename)
}

// Remove mocks base method.
func (m *MockRestartMarkFileReadRemover) Remove(filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockRestartMarkFileReadRemoverMockRecorder) Remove(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockRestartMarkFileReadRemover)(nil).Remove), filename)
}
